<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataGenStatistics</name>
    </assembly>
    <members>
        <member name="T:DataGenStatistics.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:DataGenStatistics.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DataGenStatistics.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotGenerators(System.Int32[])">
            <summary>
            Calculates generation time result data for globally given numbers of rows
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to generate  
            </param>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotSelectQueries(System.Int32[],System.String)">
            <summary>
            Calculates selection time result data for globally given numbers of rows
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to select  
            </param>
            <param name="condition">
            Selection condition (Example: WHERE a=b)
            </param>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotInsertQueries(System.Int32[],System.Boolean,System.String)">
            <summary>
            Calculates insertion time result data for globally given numbers of rows;
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to insert  
            </param>
            <param name="selectStatement">
            *tableName* gets inserted automatically at the end of quiery if selectStatement=true
            </param>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotInsertQueries(System.Int32[])">
            <summary>
            Calculates insertion time result data for globally given numbers of rows;
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to insert  
            </param>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotRemoveQueries(System.Int32[],System.String)">
            <summary>
            Calculates removal time result data for globally given numbers of rows
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to remove  
            </param>
            <param name="condition">
            Removal condition (Example: WHERE a=b)
            </param>
        </member>
        <member name="M:DataGenStatistics.investigation.Investigation.PlotUpdateQueries(System.Int32[])">
            <summary>
            Calculates update time result data for globally given numbers of rows
            Gets plotted with Plot()
            </summary>
            <param name="numberOfRows">
            Number of rows to update  
            </param>
        </member>
        <member name="T:DataGenStatistics.investigation.ProcessTimers">
            <summary>
            Timers for processes and related utilities
            </summary>
        </member>
        <member name="M:DataGenStatistics.investigation.ProcessTimers.SeveralProcessesTimeInMilliseconds(System.Collections.Generic.List{System.Func{System.Threading.Tasks.Task}})">
            <summary>
            Calculating time for several processes
            </summary>
            <param name="processes">
            Processes to calculate time for
            </param>
            <returns>
            List of milliseconds elapsed for several processes
            </returns>
        </member>
        <member name="M:DataGenStatistics.investigation.ProcessTimers.ProcessTimeInMilliseconds(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Calculating time for a process
            </summary>
            <param name="process">
            Process to calculate time for
            </param>
            <returns>
            Time in milliseconds spent for a process to complete
            </returns>
        </member>
        <member name="T:DataGenStatistics.classes.DatabaseSandbox">
            <summary>
            The database sandbox 
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.Init">
            <summary>
            Initiating the sandbox
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.MakeDBBackup">
            <summary>
            Making the database backup into a local database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.RestoreBackupIntoDB">
            <summary>
            Restoring the database from local database file backup from
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.MakeDBBackupJson(System.String)">
            <summary>
            Making the database backup into a local JSON text file (Derpecated since you can't serialize Reflection properties)
            </summary>
            <param name="where">
            Full name of a folder to write database file in
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.MakeDBBackupJsonToStandardLocalFolder">
            <summary>
            Making the database backup into a local JSON text file ...\data\dbJsonBackup.json  (Derpecated since you can't serialize Reflection properties)
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.RestoreBackupIntoDBJson(System.String)">
            <summary>
            Restoring the database from local JSON text file backup from the stated folder
            </summary>
            <param name="fromJsonAdress">
            Full name of a folder to read database from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.RestoreBackupIntoDBFromStandardFolderJson">
            <summary>
            Restoring the database from the standard local JSON text file backup ...\data\dbJsonBackup.json
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.SeedDatabaseToMSQLServer(DataGenStatistics.classes.Database)">
            <summary>
            Creating tables in database matching the sandbox
            </summary>
            <param name="database">
            Database sandbox for the seed function to get tables and their column information from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.FetchAllTablesFromSQL">
            <summary>
            Initiation of a database to data sandbox data fetch for all tables
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.FetchDataFromTable(System.String)">
            <summary>
            Initiation of a database to data sandbox data fetch for a specified table
            </summary>
            <param name="tableName">
            Name of the table to fetch data from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.FetchDataOfType``1(System.String,DataGenStatistics.classes.Table{``0},System.Type)">
            <summary>
            Initiation of a database to data sandbox data fetch from a specified table to a specified sandbox type
            </summary>
            <param name="tableName">
            Name of the table to fetch data from
            </param>
            <param name="whereDataIsGoing">
            Specified sandbox list (preferrably one within the existing sandbox)
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.PutDeltaIntoDB">
            <summary>
            Puts all newly created and added to databaseDelta values into the real database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateAdditionalData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates and puts specified numbers of new data tuples into the sandbox
            </summary>
            <param name="libs">
            Number of libraries to generate
            </param>
            <param name="users">
            Number of users to generate
            </param>
            <param name="players">
            Number of players to generate
            </param>
            <param name="archives">
            Number of archives to generate
            </param>
            <param name="servers">
            Number of servers to generate
            </param>
            <param name="sessions">
            Number of sessions to generate
            </param>
            <param name="lobbies">
            Number of lobbies to generate
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomLibraryIds(System.Int32)">
            <summary>
            Selection of a specified number of random library ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of library ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateLibraries(System.Int32)">
            <summary>
            Generation of several sandbox library tuple structures
            </summary>
            <param name="amount">
            Number of sandbox library tuples to generate
            </param>
            <returns>
            List of library tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateLibrary">
            <summary>
            Generation of a new sandbox library tuple structure
            </summary>
            <returns>
            New sandbox library tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomUserIds(System.Int32)">
            <summary>
            Selection of a specified number of random users ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of users ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateUsers(System.Int32)">
            <summary>
            Generation of several sandbox users tuple structures
            </summary>
            <param name="amount">
            Number of sandbox users tuples to generate
            </param>
            <returns>
            List of users tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateUser(System.Int32)">
            <summary>
            Generation of a new sandbox users tuple structure
            </summary>
            <param name="libraryID">
            This users's foreign key master library's id in database's hierarchy  
            </param>
            <returns>
            New sandbox users tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomPlayerIds(System.Int32)">
            <summary>
            Selection of a specified number of random player ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of player ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GeneratePlayers(System.Int32)">
            <summary>
            Generation of several sandbox player tuple structures
            </summary>
            <param name="amount">
            Number of sandbox player tuples to generate
            </param>
            <returns>
            List of player tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GeneratePlayer(System.Int32)">
            <summary>
            Generation of a new sandbox player tuple structure
            </summary>
            <param name="userID">
            This player's foreign key master users's id in database's hierarchy  
            </param>
            <returns>
            New sandbox player tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomArchiveIds(System.Int32)">
            <summary>
            Selection of a specified number of random archive ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of archive ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateArchives(System.Int32)">
            <summary>
            Generation of several sandbox archive tuple structures
            </summary>
            <param name="amount">
            Number of sandbox archive tuples to generate
            </param>
            <returns>
            List of archive tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateArchive(System.Int32)">
            <summary>
            Generation of a new sandbox archive tuple structure
            </summary>
            <param name="libraryID">
            This archive's foreign key master library's id in database's hierarchy 
            </param>
            <returns>
            New sandbox archive tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomServerIds(System.Int32)">
            <summary>
            Selection of a specified number of random server ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of server ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateServers(System.Int32)">
            <summary>
            Generation of several sandbox server tuple structures
            </summary>
            <param name="amount">
            Number of sandbox server tuples to generate
            </param>
            <returns>
            List of server tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateServer(System.Int32)">
            <summary>
            Generation of a new sandbox server tuple structure
            </summary>
            <param name="archiveID">
            This server's foreign key master archive's id in database's hierarchy 
            </param>
            <returns>
            New sandbox server tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomSessionIds(System.Int32)">
            <summary>
            Selection of a specified number of random session ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of session ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateSessions(System.Int32)">
            <summary>
            Generation of several sandbox session tuple structures
            </summary>
            <param name="amount">
            Number of sandbox session tuples to generate
            </param>
            <returns>
            List of session tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateSession(System.Int32)">
            <summary>
            Generation of a new sandbox session tuple structure
            </summary>
            <param name="serverID">
            This session's foreign key master server's id in database's hierarchy 
            </param>
            <returns>
            New sandbox session tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GetRandomLobbyIds(System.Int32)">
            <summary>
            Selection of a specified number of random lobby ids 
            </summary>
            <param name="n">
            Number of ids to select
            </param>
            <returns>
            List of lobby ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateLobbies(System.Int32)">
            <summary>
            Generation of several sandbox lobby tuple structures
            </summary>
            <param name="amount">
            Number of sandbox lobby tuples to generate
            </param>
            <returns>
            List of lobby tuple structures
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.GenerateLobby(System.Int32)">
            <summary>
            Generation of a new sandbox lobby tuple structure
            </summary>
            <param name="sessionID">
            This lobby's foreign key master session's id in database's hierarchy 
            </param>
            <returns>
            New sandbox lobby tuple structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DatabaseSandbox.RandomPlayerIds">
            <summary>
            Selection of a random number of random player id's to include into lobby's player list
            </summary>
            <returns>
            List of player ids
            </returns>
        </member>
        <member name="T:DataGenStatistics.classes.DataGenerator">
            <summary>
            The data values generator for a sandbox
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateRandomNumberOfLibraryUsages(System.Int32)">
            <summary>
            Generates no more than a specified amount of library usages
            </summary>
            <returns>
            New LibraryUsages structure containing a list of library usages
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateLibraryUsagesInfo(System.Int32)">
            <summary>
            Generates specified amount of library usages
            </summary>
            <param name="n">
            Number of library usages to generate
            </param>
            <returns>
            New LibraryUsages structure containing a list of library usages
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateLibraryUsage">
            <summary>
            Generates random library usage
            </summary>
            <returns>
            New LibraryUsage structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateCause">
            <summary>
            Selects random cause for a library usage
            </summary>
            <returns>
            Selected usage cause string
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateResult">
            <summary>
            Selects random result of a library usage
            </summary>
            <returns>
            Selected usage result string
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateUsername(System.Int32)">
            <summary>
            Generates random user nickname
            </summary>
            <returns>
            Selected nickname with random numerical ending 
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateTechnicalSpecifications">
            <summary>
            Generates random user's device's technical specifications 
            </summary>
            <returns>
            New TechnicalSpecifications structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateUserIP">
            <summary>
            Generates random user IP
            </summary>
            <returns>
            IP address string
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateUserInfo">
            <summary>
            Generates random user info 
            </summary>
            <returns>
            New UserInfo structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateUserStatus">
            <summary>
            Selects random user status from preset array of statuses
            </summary>
            <returns>
            Status string (standard: banned, active, suspended)
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GeneratePlayerNickname(System.Int32)">
            <summary>
            Generates random player nickname
            </summary>
            <returns>
            Selected nickname with random numerical ending 
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateInventory">
            <summary>
            Generates random new player inventory contents
            </summary>
            <returns>
            List of items names and quantities
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateStats">
            <summary>
            Generates random new set of stats for a player from preset arrays of parameters
            </summary>
            <returns>
            New PlayerStats structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateStatus">
            <summary>
            Selects random player status from preset array of statuses
            </summary>
            <returns>
            Status string (standard: banned, active, suspended)
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateRegion">
            <summary>
            Selects random world region from preset array of regions
            </summary>
            <returns>
            Region abbr string
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateLocation">
            <summary>
            Generates random location IP
            </summary>
            <returns>
            IP address string
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateServerAvailability">
            <summary>
            Randomly chooses if the server is avaliable as of now
            </summary>
            <returns>
            Server avaliability boolean
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateServerCapacity">
            <summary>
            Generates random serever capacity within preset capacity limits
            </summary>
            <returns>
            Server capacity integer
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateSessionInfo">
            <summary>
            Generates random new session info all related data
            </summary>
            <returns>
            Generated SessionInfo structure
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateGameLogQuery">
            <summary>
            Selects random game log query from possible game log queries
            </summary>
            <returns>
            Game log query
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateGameMap">
            <summary>
            Selects random game map name from possible game maps
            </summary>
            <returns>
            Game map name
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateGameMode">
            <summary>
            Selects random game mode from possible game modes
            </summary>
            <returns>
            Game mode
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateDatetime">
            <summary>
            Generation of a random datetime
            </summary>
            <returns>
            Any DateTime from Unix Epoch up till the present date and time 
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateDatetime(System.DateTime,System.DateTime)">
            <summary>
            Generation of a random datetime within set time period
            </summary>
            <param name="startDate">
            Earliest datetime possible to be generated
            </param>
            <param name="endDate">
            Latest datetime possible to be generated
            </param> 
            <returns>
            DateTime between startDate and endDate
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GenerateDatetimeAfter(System.DateTime)">
            <summary>
            Generation of a random datetime after set datetime and before the present
            </summary>
            <param name="dt">
            Earliest datetime possible to be generated
            </param>
            <returns>
            DateTime after dt and earlier than present
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.RandomMaster``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Selection of a random "master" object from two lists of a specified type.
            </summary>
            <param name="possibeMastersInDB">
            First list to select master from
            </param>
            <param name="possibleMastersInDBDelta">
            Second list to select master from
            </param>
            <returns>
            Master object of specific type 
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.GetRandomIds(System.Collections.Generic.List{DataGenStatistics.classes.Data},System.Int32)">
            <summary>
            Selection of a batch of random ids from the list of data.
            </summary>
            <param name="data">
            List of Data structures to select master from
            </param>
            <param name="n">
            How many ids to select
            </param>
            <returns>
            List of selected ids
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DataGenerator.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            List shuffler
            </summary>
            <param name="list">
            List to shuffle
            </param>
            <returns>
            Shuffled list
            </returns>
        </member>
        <member name="T:DataGenStatistics.classes.Data">
            <summary>
            Abstraction of a sandbox data tuple 
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Data.ToList">
            <summary>
            Data to list conversion for later DBClass processing
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Data.ToData(System.Collections.Generic.List{System.String})">
            <summary>
            List to data conversion for DBClass data extraction
            </summary>
            <param name="data">
            List of values to be cast into Data
            </param>
        </member>
        <member name="T:DataGenStatistics.classes.ITable">
            <summary>
            Abstraction of table's properties
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.InsertAbstract(System.Collections.Generic.List{System.Object})">
            <summary>
            INSERT INTO thisTableName SELECT ... abstraction
            </summary>
            <param name="abstractInsertion">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.InsertAbstract(DataGenStatistics.classes.Table{System.Object})">
            <summary>
            INSERT INTO thisTableName SELECT ... abstraction (But it's table this time around)
            </summary>
            <param name="abstractInsertion">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.SelectAllAbstract">
            <summary>
            SELECT *  FROM thisTable abstraction
            </summary>
            <returns>
            Returns the copy of this table's contents
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.SelectTopAbstract(System.Int32)">
            <summary>
            SELECT TOP n FROM thisTable abstraction
            </summary>
            <param name="n">
            Number of top rows to select
            </param>
            <returns>
            Returns n first items from this table's contents
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.DeleteTop(System.Int32)">
            <summary>
            Deletion command 1 (deleting top rows) (DELETE TOP n FROM thisTable)
            </summary>
            <param name="n">
            Number of top rows to delete
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.DeleteAll">
            <summary>
            Deletion command 2 (deleting all rows) (DELETE *  FROM thisTable)
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.ITable.CastAbstract">
            <summary>
            Casts all the table's contents against an object type for generalization purposes
            </summary>
            <returns>
            This table's clone, but each item is of object type
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.#ctor(System.String,System.String[],System.String[],System.Boolean[],System.String[])">
            <summary>
            Constructor of a new empty table with all it's components, including name, column names, primary keys and foreign keys
            </summary>
            <param name="name">
            The name of a new table, mirrors the name in the relational database
            </param>
            <param name="columnNames">
            Names of all the table's columns mirroring those of the relational DB
            </param>
            <param name="columnTypes">
            Types without constraint information according to column names
            </param>
            <param name="primaryKeys">
            Signals if the column with the same index is a primary key 
            </param>
            <param name="foreignKeys">
            Signals if the column with the same index is a primary key 
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.#ctor(System.String)">
            <summary>
            Constructor of an empty table with the name only
            </summary>
            <param name="name">
            Set name of the table
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            Insertion command 1 (inserting sub-table of rows) (INSERT INTO thisTableName SELECT ...)
            </summary>
            <param name="rows">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.Insert(`0)">
            <summary>
            Insertion command 2 (inserting individual item) (INSERT INTO thisTableName VALUES(...))
            </summary>
            <param name="item">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.Insert(DataGenStatistics.classes.Table{`0})">
            <summary>
            Insertion command 3 (inserting another table's rows) (INSERT INTO thisTableName SELECT * FROM anotherTable)
            </summary>
            <param name="table">
            Table, holding rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.SelectTop(System.Int32)">
            <summary>
            Selection command 1 (selecting top rows) (SELECT TOP n FROM thisTable)
            </summary>
            <param name="n">
            Number of top rows to select
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.SelectAll">
            <summary>
            Selection command 2 (selecting all rows) (SELECT *  FROM thisTable)
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.InsertAbstract(System.Collections.Generic.List{System.Object})">
            <summary>
            INSERT INTO thisTableName SELECT ... abstraction
            </summary>
            <param name="abstractInsertion">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.InsertAbstract(DataGenStatistics.classes.Table{System.Object})">
            <summary>
            INSERT INTO thisTableName SELECT ... abstraction (But it's table this time around)
            </summary>
            <param name="abstractInsertion">
            Sub-table rows to insert
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.SelectTopAbstract(System.Int32)">
            <summary>
            SELECT TOP n FROM thisTable abstraction
            </summary>
            <param name="n">
            Number of top rows to select
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.SelectAllAbstract">
            <summary>
            SELECT * FROM thisTable abstraction
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.DeleteTop(System.Int32)">
            <summary>
            Deletion command 1 (deleting top rows) (DELETE TOP n FROM thisTable)
            </summary>
            <param name="n">
            Number of top rows to delete
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.DeleteAll">
            <summary>
            Deletion command 2 (deleting all rows) (DELETE *  FROM thisTable)
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.TryCast(DataGenStatistics.classes.Table{System.Object})">
            <summary>
            Tries to cast table of .NET objects against another, resulting in table of data of set generic type
            </summary>
            <param name="objectTable">
            Object type table to cast against table of the set generic type 
            </param>
            <returns>
            Returns table of set generic type or sets up an exception
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.Table`1.Cast``1">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="T:DataGenStatistics.classes.Junction">
            <summary>
            Sandbox junction table data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.Database">
            <summary>
            Sandbox database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Database.#ctor(System.Boolean)">
            <summary>
            ORM database constructor, where the table properties of this class are declared and the new tables in relational database fitting table properties of this class are created
            </summary>
            <param name="main">
            Indexes if the database should de
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.Database.Clear">
            <summary>
            Player stats bit representing value of a certain in-game skill
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.Database.Add(DataGenStatistics.classes.Database)">
            <summary>
            Addition of another sandbox's values to this sandbox instance 
            </summary>
            <param name="anotherDatabase">
            Database which values will be added
            </param>
        </member>
        <member name="T:DataGenStatistics.classes.PlayerData">
            <summary>
            Sandbox player data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.Item">
            <summary>
            Player data bit representing a certain item in player's inventory 
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.PlayerStats">
            <summary>
            Player data bit representing all player's in-game stats
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.Skill">
            <summary>
            Player stats bit representing value of a certain in-game skill
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.UserData">
            <summary>
            Sandbox user data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.TechnicalSpecifications">
            <summary>
            User data bit representing tech specifications for user's device
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.UserInfo">
            <summary>
            User data bit representing miscellanious user information
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.LobbyData">
            <summary>
            Sandbox lobby data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.SessionData">
            <summary>
            Sandbox session data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.SessionInfo">
            <summary>
            User data bit representing miscellanious session information
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.ServerData">
            <summary>
            Sandbox dedicated_server data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.ArchiveData">
            <summary>
            Sandbox archive data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.LibraryData">
            <summary>
            Sandbox library data tuple
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.LibraryUsages">
            <summary>
            Library data bit representing list of data usage commentaries
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.ArchivesInfo">
            <summary>
            Library data bit representing list of related archives
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.UsersInfo">
            <summary>
            Library data bit representing list of related users
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.LibraryUsage">
            <summary>
            Library usage commentary
            </summary>
        </member>
        <member name="T:DataGenStatistics.classes.DBClass">
            <summary>
            The instance that is used to directly manage the database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetTableNames">
            <summary>
            Extracting table names from db
            </summary>
            <returns>
            List of table name strings 
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetDataTables">
            <summary>
            Extracting table objects from db
            </summary>
            <returns>
            List of DataTable objects
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetDBConnection(System.String)">
            <summary>
            Getting connection to database by it's full filename 
            </summary>
            <param name="fullDBFilename">
            Full name of the database, including path, name of the file and it's extension
            </param>
            <returns>
            Database connection object
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetDBConnection">
            <summary>
            Getting connection to globally stated database database relative to the project folder 
            </summary>
            <returns>
            Database connection object
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetDataTable(System.String)">
            <summary>
            Getting data table with SELECT statement
            </summary>
            <param name="SQL_Text">
            SELECT statement to get table or table part 
            </param>
            <returns>
            DataTable object retrieved by SELECT statement
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.ExecuteSQL(System.String)">
            <summary>
            Execution of any SQL command using already established connection with a database
            </summary>
            <param name="SQL_Text">
            SQL command text
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.CloseDBConnection">
            <summary>
            Forceful disruption of the database connection
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetNextId(System.String)">
            <summary>
            Getting the next increment of the table's id 
            </summary>
            <param name="tableName">
            Name of the table to get the next id from
            </param>
            <returns>
            Next id for the exact table
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetColumnNames(System.String)">
            <summary>
            Retrieving names of the table's columns
            </summary>
            <param name="tableName">
            Name of the table to get column names from
            </param>
            <returns>
            List of column name strings
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.TryDBInsert(System.String,DataGenStatistics.classes.Data)">
            <summary>
            Insertion of an element to the table with specified content
            </summary>
            <param name="tableName">
            Name of the table to insert into
            </param>
            <param name="new_element">
            List of insertion element values fitting the mask of all non-primary colimns
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBInsertSelect(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Insertion of an element to the table with content specified by select statement
            Example: INSERT INTO Table1(column11,column12,column13) SELECT column21, column22, column23 FROM Table2;
            </summary>
            <param name="name">
            Name of the table to insert into
            </param>
            <param name="columnNames">
            Names of the columns to insert into (the rest is default)
            </param>
            <param name="afterStatement">
            "SELECT ..." fitting the columns of the table the insertion is happening for or any other afterstatement like "DEFAULT VALUES" or "VALUES(...)"
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBInsertIntoJunction(System.String,System.String,System.String)">
            <summary>
            Insertion of a new id pair into the junction table
            </summary>
            <param name="junctionTableName">
            Name of the junction table to insert into
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.TryDBInsertMultiple(System.String,System.Collections.Generic.List{DataGenStatistics.classes.Data})">
            <summary>
            Insertion of multiple elements to the table with set content
            </summary>
            <param name="tableName">
            Name of the table to insert into
            </param>
            <param name="data">
            List of data structures convertable to lists of string insertion contents 
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBRemove(System.String,System.Int32)">
            <summary>
            Removal of a tuple with specified id
            </summary>
            <param name="tableName">
            Name of the table to remove from
            </param>
            <param name="id">
            Id of a tuple to remove
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBRemove(System.String,System.String)">
            <summary>
            Removal of tuples by specified condition
            </summary>
            <param name="tableName">
            Name of the table to remove from
            </param>
            <param name="where">
            Condition for removal
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBUpdate(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Update of specified columns with certain values of a tuple with set id 
            </summary>
            <param name="tableName">
            Name of the table to update
            </param>
            <param name="columnNames">
            Names of columns to update
            </param>
            <param name="newValues">
            Values to update the specified tuple's columns with
            </param>
            <param name="id">
            Id of a tuple to update
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBUpdate(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Update of specified columns with certain values of tuples by set condition
            </summary>
            <param name="tableName">
            Name of the table to update
            </param>
            <param name="columnNames">
            Names of columns to update
            </param>
            <param name="newValues">
            Values to update the specified tuples' columns with
            </param>
            <param name="where">
            Update condition
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DBUpdateMultiple(System.String,System.Collections.Generic.List{DataGenStatistics.classes.Data},System.Collections.Generic.List{System.Int32})">
            <summary>
            Update of multiple identified tuples with specified data.
            Number and sequence of ids must be exactly preset to the number and sequence of data.  
            </summary>
            <param name="tableName">
            Name of the table to update
            </param>
            <param name="newValues">
            List of structures convertable to values to update the identified tuples' columns with
            </param>
            <param name="ids">
            Identifiers of the tuples to update 
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetDataTableByName(System.String)">
            <summary>
            Getting the whole table by it's name
            </summary>
            <param name="tableName">
            Name of the table to get
            </param>
            <returns>
            DataTable object that mirrors the specified table
            </returns>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.CreateNewTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Creating a new table in the database
            </summary>
            <param name="name">
            Name of a new table
            </param>
            <param name="columnNames">
            Names for the new table's columns
            </param>
            <param name="types">
            Types of the new table's columns 
            (types are assigned in the same sequence as column names)
            (You can even choose the modified type such as primary key, identity, auto-increment etc.)
            </param>
            <param name="foreignKeysOrEmpty">
            List of empty strings or string table references matching "[*tableName*].*columnName*"
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.CreateManyToManyConnectionTable(System.String,System.String)">
            <summary>
            Creating a junction table for two other tables in the database
            </summary>
            <param name="name">
            Name of a new junction table
            </param>
            <param name="tableName1">
            Name of the first table in the junction
            </param>
            <param name="tableName2">
            Name of the second table in the junction
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.ClearTable(System.String)">
            <summary>
            Truncating the specific table
            </summary>
            <param name="tableName">
            Name of a table to truncate
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.ClearAllTables">
            <summary>
            Truncating all the tables in database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DropTable(System.String)">
            <summary>
            Deleting the specific table
            </summary>
            <param name="tableName">
            Name of a table to drop
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DropAll">
            <summary>
            Deleting all tables in the database
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.ReplaceAllDataInTableWithNew(System.String,System.Collections.Generic.List{DataGenStatistics.classes.Data})">
            <summary>
            Truncates the specific table and fills it with new data
            </summary>
            <param name="tableName">
            Name of a table to replace data in
            </param>
            <param name="newData">
            Data to replace table's contents with
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.UncheckAllConstraintsInDB">
            <summary>
            Unchecks all constrains for a table allowing DML commands without restriction
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.CheckAllConstraintsInDB">
            <summary>
            Checks all constrains on for a table back again
            </summary>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetPrimaryKeys(System.String)">
            <summary>
            Gets all primary key column names from the table
            </summary>
            <param name="tableName">
            Name of a table to get primary key column names from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetForeignKeys(System.String)">
            <summary>
            Gets all foreign key column names from the table
            </summary>
            <param name="tableName">
            Name of a table to get foreign key column names from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.GetColumnTypes(System.String)">
            <summary>
            Gets all foreign key column names from the table
            </summary>
            <param name="tableName">
            Name of a table to get foreign key column names from
            </param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.CreateNewDatabase(System.String,System.String)">
            <summary>
            Creates the new database on the same server the main database is using
            </summary>
            <param name="folderAdress"></param>
            <param name="name"></param>
        </member>
        <member name="M:DataGenStatistics.classes.DBClass.DropDatabase(System.String)">
            <summary>
             Deletes the database going by stated name from the server used by main database
             </summary>
             <param name="name">
             Name of the database dropped
             </param>
        </member>
        <member name="T:DataGenStatistics.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:DataGenStatistics.MainWindow.#ctor">
            <summary>
            Constructor for the main window
            </summary>
        </member>
        <member name="M:DataGenStatistics.MainWindow.RunAllStatistics">
            <summary>
            Starts investigation plotting Int
            </summary>
        </member>
        <member name="M:DataGenStatistics.MainWindow.Plot(ScottPlot.WPF.WpfPlot,System.String,System.Int32[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}},System.String)">
            <summary>
            General plotting method
            </summary>
            <param name="plot">
            WpfPlot to draw on
            </param>
            <param name="plotName">
            Title of the plot shown on top of WpfPlot widget
            </param>
            <param name="numberOfRows">
            Array of row counts for each test sequence
            </param>
            <param name="results">
            Test sequences results
            </param> 
            <param name="saveFile">
            File to save plot image to
            </param>
        </member>
        <member name="M:DataGenStatistics.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DataGenStatistics.test.SomeAutotests.RunAllTests">
            <summary>
            Testing if some data is generating
            </summary>
        </member>
        <member name="M:DataGenStatistics.test.SomeAutotests.TestGenerator">
            <summary>
            Testing if some data is generating
            </summary>
        </member>
        <member name="M:DataGenStatistics.test.SomeAutotests.TestInsertion">
            <summary>
            Testing if insertion is a success
            </summary>
        </member>
        <member name="M:DataGenStatistics.test.SomeAutotests.TestDBResponse">
            <summary>
            Testing process timers and db response by extracting database's table names
            </summary>
        </member>
        <member name="M:DataGenStatistics.test.SomeAutotests.TimerTest">
            <summary>
            Testing process timers by iterating
            </summary>
        </member>
    </members>
</doc>
